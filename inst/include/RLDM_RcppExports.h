// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RLDM_RCPPEXPORTS_H_GEN_
#define RCPP_RLDM_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace RLDM {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RLDM", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RLDM", "_RLDM_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RLDM");
            }
        }
    }

    inline Rcpp::List kf_cpp(const arma::mat& A, const arma::mat& C, const arma::mat& Q, const arma::mat& R, const arma::mat& S, const arma::mat& y_t, const arma::mat& P1, const arma::colvec& a1) {
        typedef SEXP(*Ptr_kf_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_kf_cpp p_kf_cpp = NULL;
        if (p_kf_cpp == NULL) {
            validateSignature("Rcpp::List(*kf_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::colvec&)");
            p_kf_cpp = (Ptr_kf_cpp)R_GetCCallable("RLDM", "_RLDM_kf_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_kf_cpp(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(C)), Shield<SEXP>(Rcpp::wrap(Q)), Shield<SEXP>(Rcpp::wrap(R)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(y_t)), Shield<SEXP>(Rcpp::wrap(P1)), Shield<SEXP>(Rcpp::wrap(a1)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List kf2_cpp(const arma::mat& A, const arma::mat& C, const arma::mat& H_t, const arma::mat& y_t, arma::mat& P1_R, const arma::colvec& a1) {
        typedef SEXP(*Ptr_kf2_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_kf2_cpp p_kf2_cpp = NULL;
        if (p_kf2_cpp == NULL) {
            validateSignature("Rcpp::List(*kf2_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,const arma::colvec&)");
            p_kf2_cpp = (Ptr_kf2_cpp)R_GetCCallable("RLDM", "_RLDM_kf2_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_kf2_cpp(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(C)), Shield<SEXP>(Rcpp::wrap(H_t)), Shield<SEXP>(Rcpp::wrap(y_t)), Shield<SEXP>(Rcpp::wrap(P1_R)), Shield<SEXP>(Rcpp::wrap(a1)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline double ll_kf_cpp(const arma::mat& A, const arma::mat& C, const arma::mat& Q, const arma::mat& R, const arma::mat& S, const arma::mat& y_t, const arma::mat& P1, const arma::colvec& a1, double tol) {
        typedef SEXP(*Ptr_ll_kf_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_ll_kf_cpp p_ll_kf_cpp = NULL;
        if (p_ll_kf_cpp == NULL) {
            validateSignature("double(*ll_kf_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::colvec&,double)");
            p_ll_kf_cpp = (Ptr_ll_kf_cpp)R_GetCCallable("RLDM", "_RLDM_ll_kf_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ll_kf_cpp(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(C)), Shield<SEXP>(Rcpp::wrap(Q)), Shield<SEXP>(Rcpp::wrap(R)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(y_t)), Shield<SEXP>(Rcpp::wrap(P1)), Shield<SEXP>(Rcpp::wrap(a1)), Shield<SEXP>(Rcpp::wrap(tol)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double ll_kf2_cpp(arma::mat& A, arma::mat& C, arma::mat& H_t, arma::mat& y_t, arma::mat& P1_R, arma::colvec& a1, double tol) {
        typedef SEXP(*Ptr_ll_kf2_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_ll_kf2_cpp p_ll_kf2_cpp = NULL;
        if (p_ll_kf2_cpp == NULL) {
            validateSignature("double(*ll_kf2_cpp)(arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::colvec&,double)");
            p_ll_kf2_cpp = (Ptr_ll_kf2_cpp)R_GetCCallable("RLDM", "_RLDM_ll_kf2_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ll_kf2_cpp(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(C)), Shield<SEXP>(Rcpp::wrap(H_t)), Shield<SEXP>(Rcpp::wrap(y_t)), Shield<SEXP>(Rcpp::wrap(P1_R)), Shield<SEXP>(Rcpp::wrap(a1)), Shield<SEXP>(Rcpp::wrap(tol)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double ll_kf_theta_cpp(const arma::vec& theta, const arma::mat& y, arma::mat& SYS, const arma::mat& H_SYS, const arma::vec& h_SYS, arma::mat& sigma_L, const arma::mat& H_sigma_L, const arma::vec& h_sigma_L, arma::mat& VAR, arma::mat& P1, double tol, double err) {
        typedef SEXP(*Ptr_ll_kf_theta_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_ll_kf_theta_cpp p_ll_kf_theta_cpp = NULL;
        if (p_ll_kf_theta_cpp == NULL) {
            validateSignature("double(*ll_kf_theta_cpp)(const arma::vec&,const arma::mat&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,arma::mat&,double,double)");
            p_ll_kf_theta_cpp = (Ptr_ll_kf_theta_cpp)R_GetCCallable("RLDM", "_RLDM_ll_kf_theta_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ll_kf_theta_cpp(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(SYS)), Shield<SEXP>(Rcpp::wrap(H_SYS)), Shield<SEXP>(Rcpp::wrap(h_SYS)), Shield<SEXP>(Rcpp::wrap(sigma_L)), Shield<SEXP>(Rcpp::wrap(H_sigma_L)), Shield<SEXP>(Rcpp::wrap(h_sigma_L)), Shield<SEXP>(Rcpp::wrap(VAR)), Shield<SEXP>(Rcpp::wrap(P1)), Shield<SEXP>(Rcpp::wrap(tol)), Shield<SEXP>(Rcpp::wrap(err)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline void outputs_ARMA_cpp(const arma::mat& A1, const arma::mat& B, int t0, const arma::mat& u, arma::mat& y) {
        typedef SEXP(*Ptr_outputs_ARMA_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_outputs_ARMA_cpp p_outputs_ARMA_cpp = NULL;
        if (p_outputs_ARMA_cpp == NULL) {
            validateSignature("void(*outputs_ARMA_cpp)(const arma::mat&,const arma::mat&,int,const arma::mat&,arma::mat&)");
            p_outputs_ARMA_cpp = (Ptr_outputs_ARMA_cpp)R_GetCCallable("RLDM", "_RLDM_outputs_ARMA_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_outputs_ARMA_cpp(Shield<SEXP>(Rcpp::wrap(A1)), Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(t0)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void outputs_STSP_cpp(const arma::mat& A, const arma::mat& B, const arma::mat& C, const arma::mat& D, const arma::mat& u, arma::mat& a, arma::mat& y) {
        typedef SEXP(*Ptr_outputs_STSP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_outputs_STSP_cpp p_outputs_STSP_cpp = NULL;
        if (p_outputs_STSP_cpp == NULL) {
            validateSignature("void(*outputs_STSP_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,arma::mat&)");
            p_outputs_STSP_cpp = (Ptr_outputs_STSP_cpp)R_GetCCallable("RLDM", "_RLDM_outputs_STSP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_outputs_STSP_cpp(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(C)), Shield<SEXP>(Rcpp::wrap(D)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(a)), Shield<SEXP>(Rcpp::wrap(y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void fbsolve_STSP_cpp(const arma::mat& A, const arma::mat& B, const arma::mat& C, const arma::mat& D, const arma::mat& u, arma::mat& au, arma::mat& as, arma::mat& y) {
        typedef SEXP(*Ptr_fbsolve_STSP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fbsolve_STSP_cpp p_fbsolve_STSP_cpp = NULL;
        if (p_fbsolve_STSP_cpp == NULL) {
            validateSignature("void(*fbsolve_STSP_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,arma::mat&,arma::mat&)");
            p_fbsolve_STSP_cpp = (Ptr_fbsolve_STSP_cpp)R_GetCCallable("RLDM", "_RLDM_fbsolve_STSP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fbsolve_STSP_cpp(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(C)), Shield<SEXP>(Rcpp::wrap(D)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(au)), Shield<SEXP>(Rcpp::wrap(as)), Shield<SEXP>(Rcpp::wrap(y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void solve_rmfd_cpp(const arma::mat& poly_inv, const arma::mat& poly_fwd, arma::mat& data_in, arma::mat& data_out, int t0) {
        typedef SEXP(*Ptr_solve_rmfd_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_solve_rmfd_cpp p_solve_rmfd_cpp = NULL;
        if (p_solve_rmfd_cpp == NULL) {
            validateSignature("void(*solve_rmfd_cpp)(const arma::mat&,const arma::mat&,arma::mat&,arma::mat&,int)");
            p_solve_rmfd_cpp = (Ptr_solve_rmfd_cpp)R_GetCCallable("RLDM", "_RLDM_solve_rmfd_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_solve_rmfd_cpp(Shield<SEXP>(Rcpp::wrap(poly_inv)), Shield<SEXP>(Rcpp::wrap(poly_fwd)), Shield<SEXP>(Rcpp::wrap(data_in)), Shield<SEXP>(Rcpp::wrap(data_out)), Shield<SEXP>(Rcpp::wrap(t0)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void residuals_ARMA_cpp(const arma::mat& ib0, const arma::mat& B1, const arma::mat& A, int t0, const arma::mat& y, arma::mat& u, arma::mat& dU) {
        typedef SEXP(*Ptr_residuals_ARMA_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_residuals_ARMA_cpp p_residuals_ARMA_cpp = NULL;
        if (p_residuals_ARMA_cpp == NULL) {
            validateSignature("void(*residuals_ARMA_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,int,const arma::mat&,arma::mat&,arma::mat&)");
            p_residuals_ARMA_cpp = (Ptr_residuals_ARMA_cpp)R_GetCCallable("RLDM", "_RLDM_residuals_ARMA_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_residuals_ARMA_cpp(Shield<SEXP>(Rcpp::wrap(ib0)), Shield<SEXP>(Rcpp::wrap(B1)), Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(t0)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(dU)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void residuals_STSP_cpp(const arma::mat& A, const arma::mat& B, const arma::mat& C, const arma::mat& D, const arma::mat& y, arma::mat& a, arma::mat& u, const arma::mat& dPI, arma::mat& dU) {
        typedef SEXP(*Ptr_residuals_STSP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_residuals_STSP_cpp p_residuals_STSP_cpp = NULL;
        if (p_residuals_STSP_cpp == NULL) {
            validateSignature("void(*residuals_STSP_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,arma::mat&,const arma::mat&,arma::mat&)");
            p_residuals_STSP_cpp = (Ptr_residuals_STSP_cpp)R_GetCCallable("RLDM", "_RLDM_residuals_STSP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_residuals_STSP_cpp(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(C)), Shield<SEXP>(Rcpp::wrap(D)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(a)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(dPI)), Shield<SEXP>(Rcpp::wrap(dU)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline double cll_theta_ARMA_cpp(const arma::vec& th, const arma::mat& y, unsigned long int skip, bool concentrated, arma::mat& ib0, const arma::mat& H_b, const arma::vec& h_b, arma::mat& B1, const arma::mat& H_B, const arma::vec& h_B, arma::mat& a0, arma::mat& A, const arma::mat& H_A, const arma::vec& h_A, arma::mat& L, const arma::mat& H_L, const arma::vec& h_L, arma::mat& u, arma::mat& dU) {
        typedef SEXP(*Ptr_cll_theta_ARMA_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cll_theta_ARMA_cpp p_cll_theta_ARMA_cpp = NULL;
        if (p_cll_theta_ARMA_cpp == NULL) {
            validateSignature("double(*cll_theta_ARMA_cpp)(const arma::vec&,const arma::mat&,unsigned long int,bool,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,arma::mat&)");
            p_cll_theta_ARMA_cpp = (Ptr_cll_theta_ARMA_cpp)R_GetCCallable("RLDM", "_RLDM_cll_theta_ARMA_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cll_theta_ARMA_cpp(Shield<SEXP>(Rcpp::wrap(th)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(skip)), Shield<SEXP>(Rcpp::wrap(concentrated)), Shield<SEXP>(Rcpp::wrap(ib0)), Shield<SEXP>(Rcpp::wrap(H_b)), Shield<SEXP>(Rcpp::wrap(h_b)), Shield<SEXP>(Rcpp::wrap(B1)), Shield<SEXP>(Rcpp::wrap(H_B)), Shield<SEXP>(Rcpp::wrap(h_B)), Shield<SEXP>(Rcpp::wrap(a0)), Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(H_A)), Shield<SEXP>(Rcpp::wrap(h_A)), Shield<SEXP>(Rcpp::wrap(L)), Shield<SEXP>(Rcpp::wrap(H_L)), Shield<SEXP>(Rcpp::wrap(h_L)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(dU)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double cll_theta_STSP_cpp(const arma::vec& th, const arma::mat& y, unsigned long int skip, bool concentrated, arma::mat& pi, const arma::mat& H_pi, const arma::vec& h_pi, arma::mat& L, const arma::mat& H_L, const arma::vec& h_L, arma::mat& a, arma::mat& u, arma::mat& dU) {
        typedef SEXP(*Ptr_cll_theta_STSP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cll_theta_STSP_cpp p_cll_theta_STSP_cpp = NULL;
        if (p_cll_theta_STSP_cpp == NULL) {
            validateSignature("double(*cll_theta_STSP_cpp)(const arma::vec&,const arma::mat&,unsigned long int,bool,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,arma::mat&,arma::mat&)");
            p_cll_theta_STSP_cpp = (Ptr_cll_theta_STSP_cpp)R_GetCCallable("RLDM", "_RLDM_cll_theta_STSP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cll_theta_STSP_cpp(Shield<SEXP>(Rcpp::wrap(th)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(skip)), Shield<SEXP>(Rcpp::wrap(concentrated)), Shield<SEXP>(Rcpp::wrap(pi)), Shield<SEXP>(Rcpp::wrap(H_pi)), Shield<SEXP>(Rcpp::wrap(h_pi)), Shield<SEXP>(Rcpp::wrap(L)), Shield<SEXP>(Rcpp::wrap(H_L)), Shield<SEXP>(Rcpp::wrap(h_L)), Shield<SEXP>(Rcpp::wrap(a)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(dU)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_RLDM_RCPPEXPORTS_H_GEN_
