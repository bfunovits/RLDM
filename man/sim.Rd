% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adc_simulate_methods.R
\name{sim}
\alias{sim}
\alias{sim.armamod}
\alias{sim.stspmod}
\title{Simulate from a State Space or VARMA Model}
\usage{
sim(model, n.obs, rand.gen, n.burnin, ...)

\method{sim}{armamod}(model, n.obs, rand.gen = stats::rnorm, n.burnin = 0, ...)

\method{sim}{stspmod}(model, n.obs, rand.gen = stats::rnorm, n.burnin = 0, a1 = NULL, ...)
}
\arguments{
\item{model}{either a \code{\link[=armamod]{armamod()}} or \code{\link[=stspmod]{stspmod()}} object.}

\item{n.obs}{sample size (\eqn{N}).}

\item{rand.gen}{an (optional) function to generate the disturbances \eqn{u_t}{u[t]}. Note that
\code{rand.gen()} should generate an iid sample of a random variable with mean zero
and variance one.}

\item{n.burnin}{length of an initial "burn-in" phase (denoted with \eqn{N_0}{N0}).}

\item{...}{not used.}

\item{a1}{(otional) vector with the initial state (at the start of the "burn-in-phase").
The default \code{a1 = NULL} means that a zero initial state is used.
If \code{a1 = NA} then a random initial state according to the state covariance
is generated. Here again \code{rand.gen} is used. If the model is \strong{not stable}
this covariance is not defined and the procedure will break down.}
}
\value{
List with slots
\item{y}{\eqn{(N,m)} matrix with the generated outputs.}
\item{u}{\eqn{(N,n)} matrix with the noise.}
\item{a}{\eqn{(N+1,s)} matrix with the generated states (\eqn{a_t}{a[t]}, \eqn{t=1,...,N+1}).
Note that this matrix has (\eqn{N+1}) rows! This slot is only present for state space models.}
}
\description{
Generate a time series from a given process model.
}
\details{
In order to generate a "stationary" trajectory (of a stable model) one
has to chose suitable initial starting values.
This is not quite easy, in particular for VARMA models.
As a simple remedy, the procedure offers the option of a "burn-in" phase.
The length of this phase has to be chosen by the user.

For a state space model, the value of the state at the first time point
may be passed to the procedure as parameter \code{a1}.
If \code{a1 = NULL} (which is the default value) then a zero vector is used.
If \code{a1 = NA} then a random initial state according to the state covariance is generated.
If the model is \strong{not stable}, this covariance is not defined and the procedure will break down.
Again here \code{rand.gen} is used.

If the user would like to have more control on the disturbances
and the initial values, then \code{\link[=solve_de]{solve_de()}} may be used.
}
\examples{
# Random Walk ############################################################################
model = armamod(lmfd(a = c(1,-1), b = 1))
# generate outputs "y"
n.obs = 100
data = sim(model, n.obs = n.obs, y0 = 1)
plot(data$y, type = 'l')

# bivariate ARMA(2,1) model ##############################################################
model = test_armamod(dim = c(2,2), degrees = c(2,1), bpoles = 1, bzeroes = 1)
# generate outputs "y" with zero initial conditions
n.obs = 50
data =  sim(model, n.obs = n.obs)
# reconstruct noise "u" from given outputs "y"
data1 = solve_inverse_de(model$sys, y = data$y)
all.equal(data$u, data1$u)

# bivariate state space model with 5 states ##############################################
model = test_stspmod(dim = c(2,2), s = 5, bpoles = 1, bzeroes = 1)
# generate outputs "y" with random initial state a[1]
n.obs = 50
data =  sim(model, n.obs = n.obs, a1 = NA)
# reconstruct noise "u" from given outputs "y"
data1 = solve_inverse_de(model$sys, y = data$y, a1 = data$a[1,])
all.equal(data$u, data1$u)
}
