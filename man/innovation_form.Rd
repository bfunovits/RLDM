% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aa_rldm_classes.R
\name{innovation_form}
\alias{innovation_form}
\title{Innovation Form state space Model}
\usage{
innovation_form(model, echelon_form = TRUE, y = NULL)
}
\arguments{
\item{model}{A state space model, i.e. an object of type \code{\link[=stspmod]{stspmod()}}.}

\item{echelon_form}{boolean, if \code{TRUE} the innovation form model is in addition
transformed to echelon form.}

\item{y}{\code{NULL} or a data sample. \code{as.matrix(y)} should return an
(N,m)-dimensional numeric matrix. If not \code{NULL} the noise covariance matrix is
estimated from this sample.}
}
\value{
List with slots
\item{model}{the state space model in innovation form.}
\item{z}{(complex) vector with the zeroes of the innovation form model.}
\item{z_flipped}{(boolean) vector which indicates which zeroes have been flipped.}
\item{p}{(complex) vector with the poles of the innovation form model.}
\item{p_flipped}{(boolean) vector which indicates which poles have been flipped.}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Convert a given state space model into innovation form, i.e. the transformed model satisfies
\itemize{
\item \eqn{D=I}
\item the model is stable and minimum phase.
}
The procedure "flips" bad poles and zeroes by the helper functions \code{\link[=reflect_zeroes]{reflect_zeroes()}} and \code{\link[=reflect_poles]{reflect_poles()}}.
The transformed model is an equivalent description of the process in terms of second order moments.
This means that the spectral density is not changed.
}
\examples{
# in order to get reproducable results
set.seed(342)

model = r_model(tmpl_stsp_full(3, 3, 5))
print(model, digits = 4)
# the model has two non-minimum phase zeroes and two non-stable poles.
z = zeroes(model, print_message = FALSE)
abs(z)
p = poles(model, print_message = FALSE)
abs(p)

# convert to innnovation form, by flipping the "bad" poles and zeroes.
out = innovation_form(model)
print(out$model, digits = 4)
flip = function(x) {
  x[abs(x) < 1] = 1/x[abs(x) < 1]
  return(x)}
data.frame(poles.inno = out$p, flipped = out$p_flipped,
           poles.ori = p[match_vectors(out$p, p)],
           zeroes.inno = out$z, flipped = out$z_flipped,
           zeroes.ori = z[match_vectors(out$z, flip(z))])

# check that the innovation form model describes the same process,
# by checking that the spectral density is not changed!
junk = spectrald(model, n.f = 128)
junk1 = spectrald(out$model, n.f = 128)
all.equal(junk, junk1)

# reset seed
set.seed(NULL)
}
