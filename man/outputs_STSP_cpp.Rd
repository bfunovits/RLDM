% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{outputs_STSP_cpp}
\alias{outputs_STSP_cpp}
\title{Outputs of a statespace system}
\usage{
outputs_STSP_cpp(A, B, C, D, u, a, y)
}
\arguments{
\item{A}{\eqn{(s,s)} matrix.}

\item{B}{\eqn{(s,n)} matrix.}

\item{C}{\eqn{(m,s)} matrix.}

\item{D}{\eqn{(m,n)} matrix.}

\item{u}{\eqn{(n,N)} matrix with the inputs/disturbances:
\eqn{(u_1,u_2,\ldots,u_N)}{(u[1],u[2],...,u[N])}.}

\item{a}{\eqn{(s,N+1)} matrix. This matrix is overwritten with the (computed) states:
\eqn{(a_1,a_2,\ldots,a_N,a_{N+1})}{(a[1],a[2],\ldots,a[N],a[N+1])}.
On input \code{a[,1]} must hold the initial state \eqn{a_1}{a[1]}.}

\item{y}{\eqn{(m,N)} matrix. This matrix is overwritten with (computed) outputs:
\eqn{(y_1,y_2,\ldots,y_N)}{(y[1],y[2],...,y[N])}.}
}
\value{
This RcppArmadillo routine returns \code{NULL} but \bold{overwrites} the input
arguments \code{a} and \code{u}!
}
\description{
This internal helper function computes the outputs and states
for a statespace system of the form
\deqn{a_{t+1} = A a_t + B u_t, \; y_t   = C a_t + D u_t}{
      a[t+1] = A a[t] + B u[t] and y[t]   = C a[t] + D u[t]}
}
\note{
Use this procedure with care!
\itemize{
\item The procedure does \bold{not} check the input arguments.
\item The procedure \bold{overwrites} the input arguments \code{a} and \code{u}.
\item The data matrices are organized columnwise (to avoid memory shuffling)!
}
}
\examples{
# generate a random statespace model (3 outputs, 2 inputs and 4 states)
m = 3
n = 2
s = 4
model = test_stspmod(dim = c(m, n), s = s, digits = 2)

# generate random noise sequence (sample size N = 10)
n.obs = 10
u = matrix(rnorm(n.obs*n), nrow = n, ncol = n.obs)
print(u)

# generate matrix for the state sequence
a = matrix(0, nrow = s, ncol = n.obs+1)
a[,1] = rnorm(s) # random initial state a[1]
print(a)

# generate matrix for the outputs
y = matrix(0, nrow = m, ncol = n.obs)

# call outputs_STSP_cpp()
outputs_STSP_cpp(model$sys$A, model$sys$B, model$sys$C, model$sys$D, u, a, y)
print(u)
print(a)  # a is overwritten with the computed states
print(y)  # y is overwritten with the computed outputs
}
\seealso{
\code{\link{outputs_ARMA_cpp}}, \code{\link{residuals_ARMA_cpp}},  \code{\link{cll_theta_ARMA_cpp}},
\code{\link{outputs_STSP_cpp}}, \code{\link{residuals_STSP_cpp}},  \code{\link{cll_theta_STSP_cpp}} and
\code{\link{solve_de}}, \code{\link{solve_inverse_de}} and \code{\link{ll}}.
}
