% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adb_solve_methods.R
\name{solve_inverse_RMFD_R}
\alias{solve_inverse_RMFD_R}
\title{Obtain Inputs of RMFD System for Given Data}
\usage{
solve_inverse_RMFD_R(polm_c, polm_d, data_output, t0 = 1)
}
\arguments{
\item{polm_c, polm_d}{polm objects. Jointly, they reprsent an RMFD.
\eqn{c(z)} is square, has the identity as zero-lag coefficient.
\eqn{d(z)} might be tall, and its zero-lag coefficient matrix is in general free.}

\item{data_output}{\eqn{(m, N)} matrix with the outputs \eqn{(y_1,...,y_N}{(y[1],...,y[N])}.}

\item{t0}{integer, start iteration at t=t0.}
}
\value{
The R implementation \code{solve_inverse_RMFD_R} returns the matrix \code{u} with the computed inputs
\deqn{u_t = d^{+}(z) c(z) y_t}{u[t] = d^{+}(z) c(z) y[t]} in its columns.
The RcppArmadillo implementation \code{\link[=solve_rmfd_cpp]{solve_rmfd_cpp()}} returns \code{NULL} but \strong{overwrites} its input argument!
Note that the RcppArmadillo implementation has a different user interface (it is intended for internal use only).
}
\description{
Compute the inputs \eqn{u_t}{u[t]} of RMFD(p, q) systems of the form
\deqn{y_t = d_0 v_t + d_1 v_{t-1} + \cdots + d_q v_{t-q}}{y[t] = d[0] v[t] + d[1] v[t-1] + ... + d[q] v[t-q]}
where
\deqn{v_t + c_1 v_{t-1} + \cdots + c_p v_{t-p} = u_t}{v[t] + c[1] v[t-1] + ... + c[p] v[t-p] = u[t]}
for given data \eqn{y_t}{y[t]} which are contained column-wise in the matrix \code{data_output}, see below.
}
\details{
Values \eqn{y_t}{y[n]}, \eqn{u_t}{u[t]} for \eqn{t\leq 0}{t\le 0} are implicitely set to be zero.
However, if we start the iteration with some \eqn{t_0>1}{t0>1} we can enforce non-zero initial values.

The routines are used internally and hence do \strong{not} check their arguments.
We require the number of outputs to be positive \eqn{m > 0}, the number of inputs to be non-negative \eqn{n \geq 0}{n \ge 0},
the degree of \eqn{c(z)} to be non-negative \eqn{p \geq 0}{p \ge 0}, the degree of \eqn{d(z)} is unrestricted, i.e. \eqn{(q+1) \geq 0}{(q+1) \ge 0},
and for the starting value and the sample size \eqn{1 \leq t_0 \leq N}{1 \le t0 \le N} holds.
Note also that the RcppArmadillo implementation \strong{overwrites} the input argument \code{y}.
Use this procedure with care!

Note the non standard arguments:
The polynomial matrices \eqn{c(z)} and \eqn{d(z)} are saved as "wide" matrices.
The order of the coefficients in \eqn{c(z)} is reversed and there is no \eqn{c_0} coefficient (because it is required to be the identity matrix).
The order of the coefficients in \eqn{d(z)} is as usual, \eqn{d_0} is available too.
The data matrices are organized columnwise (to avoid memory shuffling)!
}
\seealso{
solve_RMFD_R
}
