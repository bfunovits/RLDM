% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aa_rldm_classes.R
\name{test_stspmod}
\alias{test_stspmod}
\title{Create Test state space Model}
\usage{
test_stspmod(
  dim = c(1, 1),
  s = NULL,
  nu = NULL,
  D = NULL,
  sigma_L = NULL,
  digits = NULL,
  bpoles = NULL,
  bzeroes = NULL,
  n.trials = 100
)
}
\arguments{
\item{dim}{integer vector \code{c(m,n)}.}

\item{s}{state dimension (or NULL).}

\item{nu}{vector with the Kronecker indices (or \code{NULL}). Either the state space dimension \code{s}
or the Kronecker indices \code{nu} must be non \code{NULL}. If both parameters are given,
then the parameter \code{s} is ignored.}

\item{D}{\eqn{(m,n)} dimensional matrix (or \code{NULL}). See the details below.}

\item{sigma_L}{\eqn{(n,n)} dimensional matrix (or \code{NULL}). See the details below.}

\item{digits}{integer, if non NULL then the randomly generated numbers are rounded to
"digits" number of decimal places.}

\item{bpoles}{lower bound for the moduli of the poles of the corresponding transfer function (or NULL).}

\item{bzeroes}{lower bound for the moduli of the zeroes of the corresponding tranmsfer function (or NULL).
This parameter is ignored for non-square matrices (m != n).}

\item{n.trials}{maximum number of trials.}
}
\value{
\code{\link[=stspmod]{stspmod()}} object, which represents the generated model.
}
\description{
This simple tool may be used to create a random, state space model
\deqn{a_{t+1} = A a_t + B u_t \mbox{ and } y_t = C a_t + D u_t.}{
      a[t+1] = A a[t] + B u[t] and y[t] = C a[t] + D u[t].}
}
\details{
If the Kronecker indices (parameter \code{nu})
are given, then a state space model in echelon canonical form is generated. This means that
some of the entries of the \eqn{A,B,C} matrices are fixed to be one or zero and the
others are considerd as "free". See also \code{\link[rationalmatrices:Kronecker-Indices]{rationalmatrices::Kronecker-Indices()}}.
The entries of the \eqn{A, B, C} matrices, which are not a priori fixed
are randomly generated.

If only the state dimension \eqn{s} (parameter \code{s})
is given, then all entries of the \eqn{A, B, C} matrices
are considered as "free".

The \eqn{D} matrix defaults to a \eqn{(m,n)}-dimensional diagonal matrix
with ones on the diagonal (\code{diag(x=1, nrow = m, ncol = n)}). However, one may
also pass an arbitray (compatible) \eqn{D} matrix to the procedure.
This matrix may contain \code{NA}'s, which then are replaced by random numbers.

The \eqn{sigma_L} matrix defaults to a \eqn{(n,n)}-dimensional lower, triangular matrix
However, one may also pass an arbitray (compatible) \eqn{sigma_L} matrix to the procedure.

The user may prescribe lower bounds for the moduli of the zeroes and/or poles of the transfer function
\deqn{k(z) = C(I_m z{-1} - A)^{-1} B + D.}{k(z) = C(I z{-1} - A)^{-1} B + D.}
In this case the procedure simply generates (up to n.trials) random models until a model is found
which satisfies the constraint. The standard deviation of the normal distribution, which is used to
generate the random entries, is decreased in each step. Of course this is a very crude method and
it may fail or need a very large number of randomly generated matrices.

Note also, that the generated model may be non-minimal.
}
\examples{
### random state space model with two outputs and state dimension s = 3
### The model is required to be stable and minimum phase
model = try(test_stspmod(dim = c(2,2), s = 3, digits = 2, bpoles = 1, bzeroes = 1))
if (!inherits(model, 'try-error')) {
   print(model)
   print(min(abs(poles(model$sys))) > 1)
   print(min(abs(zeroes(model$sys))) > 1)
   print(pseries2nu(pseries(model$sys, lag.max = 10))) # Kronecker indices
}

### random state space model with three outputs and 2 inputs in echelon canonical form
### D is lower triangular (with ones on the diagonal)
### the model is required to stable (the transfer function has no poles within the unit circle)
model = try(test_stspmod(dim = c(3, 2), nu = c(2,3,0),
                         D = matrix(c(1,NA,NA,0,1,NA), nrow = 3, ncol = 2),
                         digits = 2, bpoles = 1))

if (!inherits(model, 'try-error')) {
   print(model)
   print(min(abs(poles(model$sys))) > 1)
   print(pseries2nu(pseries(model$sys, lag.max = 10))) # Kronecker indices
}
}
