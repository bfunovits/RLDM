% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ab_templates.R
\name{fill_template}
\alias{fill_template}
\alias{extract_theta}
\title{Connect Deep Parameters with a Model}
\usage{
fill_template(th, template)

extract_theta(
  model,
  template,
  tol = sqrt(.Machine$double.eps),
  on_error = c("ignore", "warn", "stop"),
  ignore_sigma_L = FALSE
)
}
\arguments{
\item{th}{Vector containing free (deep) parameters.}

\item{template}{A template like listed in \code{\link[=model structures]{model structures()}}, or a template explicitly specified by the user with \code{\link[=model2template]{model2template()}}. Essentially, a template is an affine mapping parametrised as a vector \code{h} and matrix \code{H} which connect the free (deep) parameters to the linear parameters of the model.}

\item{model}{A model object, i.e. an \code{\link[=armamod]{armamod()}}, \code{\link[=stspmod]{stspmod()}}, or \code{\link[=rmfdmod]{rmfdmod()}} object, from which deep parameters should be extracted.}

\item{tol}{In \code{extract_theta}, small double specifying the tolerance for an acceptable distance between the linear parameters and \code{H} times the deep parameters.
Default is st to \code{sqrt(.Machine$double.eps)}.}

\item{on_error}{In \code{extract_theta}, character string with possible choices \code{ignore}, \code{warn}, \code{stop}.
Specifies what should happen when the distance between the linear parmameters and \code{H} times the deep parameters, is larger than the specified \code{tol}.
Default is \code{ignore}}

\item{ignore_sigma_L}{Boolean, default set to \code{FALSE}.
If TRUE, the linear and free parameters pertaining
the left square root \code{sigma_L} of the error covariance matrix are ignored.
See also \code{\link[=tmpl_sigma_L]{tmpl_sigma_L()}} and \code{\link[=model structures]{model structures()}} for more detail.}
}
\value{
\code{fill_template} returns a model object, i.e. an \code{\link[=armamod]{armamod()}}, \code{\link[=stspmod]{stspmod()}}, or
\code{\link[=rmfdmod]{rmfdmod()}} object, according to the class of the template (and the given parameters \code{th}).
The function \code{extract_theta} returns the vector of \emph{free} parameters for a given model and template.
}
\description{
\code{fill_template} fills a given \code{template},
i.e. in essence an affine mapping from the free parameters to the linear parameters of a model class specified in the template,
with the given free (deep) parameters \code{th} and returns a model (e.g. an \code{\link[=armamod]{armamod()}} or a \code{\link[=stspmod]{stspmod()}}).
The procedure can be used to generate random models, see e.g. \code{\link[=r_model]{r_model()}}, or for \emph{M-estimates},
i.e. for estimation procedures where the estimate is obtained by minimizing (maximizing) a criterion (e.g. ML or GMM estimation).
\cr\cr
The "inverse function" \code{extract_theta} extracts the free/deep parameters from the linear parameters of a model,
by using the information provided in the template.
To this end the procedure first constructs the vector \eqn{\pi} of the stacked (linear) model parameters and then determines the deep parameters \eqn{\theta} as the least squares solution of the equation system
\deqn{(\pi - h) =  H\theta}
If the residuals are non zero, then the model does not (exactly) fit to the model structure.
The threshold \code{tol} is used to decide whether the model fits to the template or not.
The parameter \code{on_error} decides what to do in the case of a "significant" misfit.
For \code{"ignore"} the procedure ignores the misfit, for \code{"warn"} the procedure issues a warning,
and for \code{"stop"} the procedure stops with an appropriate error message.
\cr
In many cases the noise covariance is not explicitly parametrized, since \eqn{\Sigma} is estimated by another route.
This may be accomplished by fixing sigma_L to the identity matrix, with the option \code{sigma_L = "identity"} for the \verb{tmpl_***} functions.
In order to \strong{extract the system parameters} (e.g. the AR and MA parameters for an ARMA model) from a model where \code{sigma_L} is not equal to the identity, one may use the option \code{ignore_sigma_L = TRUE}.
This ignores a possible mismatch for \code{sigma_L} but still checks whether the system parameters are in accordance to the model structure.
}
\section{Connection to Likelihood Estimation}{


These functions are important for likelihood estimation where the following instances of functionality are necessary.
\itemize{
\item When an initial estimate is given through a model (together with a template), one may use \code{extract_theta} to extract the deep parameters. This vector of initial free/deep parameter values needs to be supplied to an optimizer.
\item The optimized deep parameter values need to be filled into the model by using the structure provided by a template. This is done with \code{fill_template}
}
}

\examples{
# Extract deep parameter from ARMA object with ARMA(p,q) template ##########
(armamod_obj = test_armamod(dim = c(2,2), degree = c(3,1)))
(tmpl_obj = tmpl_arma_pq(2, 2, 3, 1))

extract_theta(armamod_obj, tmpl_obj)


# Fill template with deep parameters #################
(tmpl_obj = tmpl_arma_echelon(nu = c(3,2)))
# Number of columns of matrix H in affine mapping = number of free parameters
(n_par_deep = dim(tmpl_obj$H)[2])

fill_template(rnorm(n_par_deep), tmpl_obj)
}
\seealso{
\code{\link[=model structures]{model structures()}}, \code{\link[=ll]{ll()}}, \code{\link[=ll_theta]{ll_theta()}} and \code{\link[=ll_FUN]{ll_FUN()}}.
}
