% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aa_rldm_classes.R
\name{r_model}
\alias{r_model}
\title{Generate a Random Model}
\usage{
r_model(
  template,
  ntrials.max = 100,
  bpoles = NULL,
  bzeroes = NULL,
  rand.gen = stats::rnorm,
  ...
)
}
\arguments{
\item{template}{A model template as computed e.g. by \code{\link[=model2template]{model2template()}}.}

\item{ntrials.max}{Maximum number of trials.}

\item{bpoles, bzeroes}{Lower bounds on the poles and zeroes of the model
(such that stability and invertibility assumptions are satisfied).
If set to \code{NA}, then the corresponding test is skipped.}

\item{rand.gen}{(optional) A function to generate the random, "free" parameters.}

\item{...}{Additional parameters, passed on to \code{rand.gen}.
In particular, if the "free" paramameters are generated by \code{\link[=rnorm]{rnorm()}},
then the standard deviation \code{sd} may be set.
Choosing small values for \code{sd} makes it easier to find a stable and miniphase model.
Of course this "trick" only works if the reference model, which is obtained
with a zero parameter vector, satisfies the constraints.}
}
\value{
Model object whose class depends on the template.
}
\description{
This function may be used to generate random state space or VARMA models.
The main argument is a model template, which defines the type of model to generate,
see e.g. \code{\link[=model structures]{model structures()}}.
If bounds for the poles and/or the zeroes are given,
then the procedure simply generates random models until a model which satisfies the constraint is found.
Of course this is a very crude method and it may need a large number of randomly generated model.
}
\examples{
# Generate a random VARMA model in echelon form ############

# Compute the appropriate model template
tmpl = tmpl_arma_echelon(nu = c(1,2,1))

# Create a random model, which is stable but not necessarily miniphase
model = r_model(tmpl, bpoles = 1, sd = 0.5)
model

# Check whether the poles satisfy the constraint
min(abs(poles(model)))
min(abs(zeroes(model)))
}
