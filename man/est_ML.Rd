% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/afb_estimate_logLikelihood.R
\name{est_ML}
\alias{est_ML}
\title{Maximum Likelihood Estimation}
\usage{
est_ML(
  y,
  tmpl,
  th,
  which = c("concentrated", "conditional", "kf"),
  method = c("BFGS", "Nelder-Mead", "CG", "L-BFGS-B", "SANN", "Brent"),
  hessian = FALSE,
  control = list()
)
}
\arguments{
\item{y}{sample, i.e. an \eqn{(N,m)} dimensional matrix,
or a "time series" object (i.e. \code{as.matrix(y)} should return an
\eqn{(N,m)}-dimensional numeric matrix). Missing values (\code{NA}, \code{NaN} and
\code{Inf}) are \strong{not} supported.}

\item{tmpl}{a model template which describes the model class, see \code{\link[=model structures]{model structures()}}.
Note that only the case of (non-empty, square) state space or ARMA models is implemented.}

\item{th}{Initial parameter estimate.}

\item{which}{(character string) determines which "likelihood" to be used, see also \code{\link[=ll]{ll()}}.
The option \code{"kf"}  is only supported for state space models.}

\item{method, hessian, control}{are passed on to the optimization routine \code{\link[stats:optim]{stats::optim()}}.}
}
\value{
A list with components
\item{model}{The estimated model.}
\item{th}{The corresponding vector of \emph{deep} parameters.}
\item{ll}{The log likelihood of the estimated model.}
\item{which}{The type of likelihood used.}
\item{counts, convergence, message, hessian}{as returned by  \code{\link[stats:optim]{stats::optim()}}.}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#superseded}{\figure{lifecycle-superseded.svg}{options: alt='[Superseded]'}}}{\strong{[Superseded]}}
This is a naive implementation of Maximum Likelihood Estimation.
Rather use \code{\link[=ll]{ll()}} and \code{\link[=ll_FUN]{ll_FUN()}}.
}
\note{
\itemize{
\item The optimization is computed with the general-purpose routine \code{\link[stats:optim]{stats::optim()}}.
\item An initial estimate is \strong{needed}.
\item The procedure does \strong{not} respect constraints like stability or minimum phase.
\item The case of the \emph{conditional, concentrated} likelihood is somewhat special.
In this case the model template must have a particular structure: (1) The noise covariance
is parametrized via the left cholesky factor. (2) The last \eqn{m(m+1)/2} components
of the parameter vector \eqn{\theta} parametrize this left cholesky factor and the other components
describe the system. (This implies that there is no overlap/dependency betweeen the "system parameters"
and the "noise parameters".)
}
}
\examples{
# Generate a random model in echelon form model (m = 3)
tmpl = tmpl_stsp_echelon(nu = c(2,1,1))
model = r_model(template = tmpl, bpoles = 1, bzeroes = 1, sd = 0.25)
diag(model$sigma_L) = 1 # scale the diagonal entries of sigma_L
print(model)
# extract the corresponding free/deep parameters
th = extract_theta(model, tmpl)

# generate a sample with 500 observations
y = sim(model, n.obs = 500, n.burn_in = 100)$y

# We are cheating here and use the true model parameters
# as starting values for the optimization routine:

# estimate the model with the "exakt log likelihood"
out = est_ML(y, tmpl, th, which = 'kf')
KL_divergence(model, out$model)

# estimate the model with "conditional log likelihood"
out = est_ML(y, tmpl, th, which = 'conditional')
KL_divergence(model, out$model)

# estimate the model with "concentrated, conditional log likelihood"
out = est_ML(y, tmpl, th, which = 'concentrated')
KL_divergence(model, out$model)
}
