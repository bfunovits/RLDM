// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RLDM.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// kf_cpp
Rcpp::List kf_cpp(const arma::mat& A, const arma::mat& C, const arma::mat& Q, const arma::mat& R, const arma::mat& S, const arma::mat& y_t, const arma::mat& P1, const arma::colvec& a1);
static SEXP _RLDM_kf_cpp_try(SEXP ASEXP, SEXP CSEXP, SEXP QSEXP, SEXP RSEXP, SEXP SSEXP, SEXP y_tSEXP, SEXP P1SEXP, SEXP a1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_t(y_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type a1(a1SEXP);
    rcpp_result_gen = Rcpp::wrap(kf_cpp(A, C, Q, R, S, y_t, P1, a1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_kf_cpp(SEXP ASEXP, SEXP CSEXP, SEXP QSEXP, SEXP RSEXP, SEXP SSEXP, SEXP y_tSEXP, SEXP P1SEXP, SEXP a1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_kf_cpp_try(ASEXP, CSEXP, QSEXP, RSEXP, SSEXP, y_tSEXP, P1SEXP, a1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// kf2_cpp
Rcpp::List kf2_cpp(const arma::mat& A, const arma::mat& C, const arma::mat& H_t, const arma::mat& y_t, arma::mat& P1_R, const arma::colvec& a1);
static SEXP _RLDM_kf2_cpp_try(SEXP ASEXP, SEXP CSEXP, SEXP H_tSEXP, SEXP y_tSEXP, SEXP P1_RSEXP, SEXP a1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_t(H_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_t(y_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1_R(P1_RSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type a1(a1SEXP);
    rcpp_result_gen = Rcpp::wrap(kf2_cpp(A, C, H_t, y_t, P1_R, a1));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_kf2_cpp(SEXP ASEXP, SEXP CSEXP, SEXP H_tSEXP, SEXP y_tSEXP, SEXP P1_RSEXP, SEXP a1SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_kf2_cpp_try(ASEXP, CSEXP, H_tSEXP, y_tSEXP, P1_RSEXP, a1SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ll_kf_cpp
double ll_kf_cpp(const arma::mat& A, const arma::mat& C, const arma::mat& Q, const arma::mat& R, const arma::mat& S, const arma::mat& y_t, const arma::mat& P1, const arma::colvec& a1, double tol);
static SEXP _RLDM_ll_kf_cpp_try(SEXP ASEXP, SEXP CSEXP, SEXP QSEXP, SEXP RSEXP, SEXP SSEXP, SEXP y_tSEXP, SEXP P1SEXP, SEXP a1SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_t(y_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_kf_cpp(A, C, Q, R, S, y_t, P1, a1, tol));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_ll_kf_cpp(SEXP ASEXP, SEXP CSEXP, SEXP QSEXP, SEXP RSEXP, SEXP SSEXP, SEXP y_tSEXP, SEXP P1SEXP, SEXP a1SEXP, SEXP tolSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_ll_kf_cpp_try(ASEXP, CSEXP, QSEXP, RSEXP, SSEXP, y_tSEXP, P1SEXP, a1SEXP, tolSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ll_kf2_cpp
double ll_kf2_cpp(arma::mat& A, arma::mat& C, arma::mat& H_t, arma::mat& y_t, arma::mat& P1_R, arma::colvec& a1, double tol);
static SEXP _RLDM_ll_kf2_cpp_try(SEXP ASEXP, SEXP CSEXP, SEXP H_tSEXP, SEXP y_tSEXP, SEXP P1_RSEXP, SEXP a1SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type H_t(H_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y_t(y_tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1_R(P1_RSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_kf2_cpp(A, C, H_t, y_t, P1_R, a1, tol));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_ll_kf2_cpp(SEXP ASEXP, SEXP CSEXP, SEXP H_tSEXP, SEXP y_tSEXP, SEXP P1_RSEXP, SEXP a1SEXP, SEXP tolSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_ll_kf2_cpp_try(ASEXP, CSEXP, H_tSEXP, y_tSEXP, P1_RSEXP, a1SEXP, tolSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ll_kf_theta_cpp
double ll_kf_theta_cpp(const arma::vec& theta, const arma::mat& y, arma::mat& SYS, const arma::mat& H_SYS, const arma::vec& h_SYS, arma::mat& sigma_L, const arma::mat& H_sigma_L, const arma::vec& h_sigma_L, arma::mat& VAR, arma::mat& P1, double tol, double err);
static SEXP _RLDM_ll_kf_theta_cpp_try(SEXP thetaSEXP, SEXP ySEXP, SEXP SYSSEXP, SEXP H_SYSSEXP, SEXP h_SYSSEXP, SEXP sigma_LSEXP, SEXP H_sigma_LSEXP, SEXP h_sigma_LSEXP, SEXP VARSEXP, SEXP P1SEXP, SEXP tolSEXP, SEXP errSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type SYS(SYSSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_SYS(H_SYSSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h_SYS(h_SYSSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma_L(sigma_LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_sigma_L(H_sigma_LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h_sigma_L(h_sigma_LSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type VAR(VARSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type err(errSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_kf_theta_cpp(theta, y, SYS, H_SYS, h_SYS, sigma_L, H_sigma_L, h_sigma_L, VAR, P1, tol, err));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_ll_kf_theta_cpp(SEXP thetaSEXP, SEXP ySEXP, SEXP SYSSEXP, SEXP H_SYSSEXP, SEXP h_SYSSEXP, SEXP sigma_LSEXP, SEXP H_sigma_LSEXP, SEXP h_sigma_LSEXP, SEXP VARSEXP, SEXP P1SEXP, SEXP tolSEXP, SEXP errSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_ll_kf_theta_cpp_try(thetaSEXP, ySEXP, SYSSEXP, H_SYSSEXP, h_SYSSEXP, sigma_LSEXP, H_sigma_LSEXP, h_sigma_LSEXP, VARSEXP, P1SEXP, tolSEXP, errSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// outputs_ARMA_cpp
void outputs_ARMA_cpp(const arma::mat& A1, const arma::mat& B, int t0, const arma::mat& u, arma::mat& y);
static SEXP _RLDM_outputs_ARMA_cpp_try(SEXP A1SEXP, SEXP BSEXP, SEXP t0SEXP, SEXP uSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const arma::mat& >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    outputs_ARMA_cpp(A1, B, t0, u, y);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_outputs_ARMA_cpp(SEXP A1SEXP, SEXP BSEXP, SEXP t0SEXP, SEXP uSEXP, SEXP ySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_outputs_ARMA_cpp_try(A1SEXP, BSEXP, t0SEXP, uSEXP, ySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// outputs_STSP_cpp
void outputs_STSP_cpp(const arma::mat& A, const arma::mat& B, const arma::mat& C, const arma::mat& D, const arma::mat& u, arma::mat& a, arma::mat& y);
static SEXP _RLDM_outputs_STSP_cpp_try(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP DSEXP, SEXP uSEXP, SEXP aSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    outputs_STSP_cpp(A, B, C, D, u, a, y);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_outputs_STSP_cpp(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP DSEXP, SEXP uSEXP, SEXP aSEXP, SEXP ySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_outputs_STSP_cpp_try(ASEXP, BSEXP, CSEXP, DSEXP, uSEXP, aSEXP, ySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fbsolve_STSP_cpp
void fbsolve_STSP_cpp(const arma::mat& A, const arma::mat& B, const arma::mat& C, const arma::mat& D, const arma::mat& u, arma::mat& au, arma::mat& as, arma::mat& y);
static SEXP _RLDM_fbsolve_STSP_cpp_try(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP DSEXP, SEXP uSEXP, SEXP auSEXP, SEXP asSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type au(auSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type as(asSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    fbsolve_STSP_cpp(A, B, C, D, u, au, as, y);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_fbsolve_STSP_cpp(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP DSEXP, SEXP uSEXP, SEXP auSEXP, SEXP asSEXP, SEXP ySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_fbsolve_STSP_cpp_try(ASEXP, BSEXP, CSEXP, DSEXP, uSEXP, auSEXP, asSEXP, ySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// solve_rmfd_cpp
void solve_rmfd_cpp(const arma::mat& poly_inv, const arma::mat& poly_fwd, arma::mat& data_in, arma::mat& data_out, int t0);
static SEXP _RLDM_solve_rmfd_cpp_try(SEXP poly_invSEXP, SEXP poly_fwdSEXP, SEXP data_inSEXP, SEXP data_outSEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const arma::mat& >::type poly_inv(poly_invSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type poly_fwd(poly_fwdSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data_in(data_inSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data_out(data_outSEXP);
    Rcpp::traits::input_parameter< int >::type t0(t0SEXP);
    solve_rmfd_cpp(poly_inv, poly_fwd, data_in, data_out, t0);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_solve_rmfd_cpp(SEXP poly_invSEXP, SEXP poly_fwdSEXP, SEXP data_inSEXP, SEXP data_outSEXP, SEXP t0SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_solve_rmfd_cpp_try(poly_invSEXP, poly_fwdSEXP, data_inSEXP, data_outSEXP, t0SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// residuals_ARMA_cpp
void residuals_ARMA_cpp(const arma::mat& ib0, const arma::mat& B1, const arma::mat& A, int t0, const arma::mat& y, arma::mat& u, arma::mat& dU);
static SEXP _RLDM_residuals_ARMA_cpp_try(SEXP ib0SEXP, SEXP B1SEXP, SEXP ASEXP, SEXP t0SEXP, SEXP ySEXP, SEXP uSEXP, SEXP dUSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const arma::mat& >::type ib0(ib0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B1(B1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type dU(dUSEXP);
    residuals_ARMA_cpp(ib0, B1, A, t0, y, u, dU);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_residuals_ARMA_cpp(SEXP ib0SEXP, SEXP B1SEXP, SEXP ASEXP, SEXP t0SEXP, SEXP ySEXP, SEXP uSEXP, SEXP dUSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_residuals_ARMA_cpp_try(ib0SEXP, B1SEXP, ASEXP, t0SEXP, ySEXP, uSEXP, dUSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// residuals_STSP_cpp
void residuals_STSP_cpp(const arma::mat& A, const arma::mat& B, const arma::mat& C, const arma::mat& D, const arma::mat& y, arma::mat& a, arma::mat& u, const arma::mat& dPI, arma::mat& dU);
static SEXP _RLDM_residuals_STSP_cpp_try(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP DSEXP, SEXP ySEXP, SEXP aSEXP, SEXP uSEXP, SEXP dPISEXP, SEXP dUSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dPI(dPISEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type dU(dUSEXP);
    residuals_STSP_cpp(A, B, C, D, y, a, u, dPI, dU);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_residuals_STSP_cpp(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP DSEXP, SEXP ySEXP, SEXP aSEXP, SEXP uSEXP, SEXP dPISEXP, SEXP dUSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_residuals_STSP_cpp_try(ASEXP, BSEXP, CSEXP, DSEXP, ySEXP, aSEXP, uSEXP, dPISEXP, dUSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cll_theta_ARMA_cpp
double cll_theta_ARMA_cpp(const arma::vec& th, const arma::mat& y, unsigned long int skip, bool concentrated, arma::mat& ib0, const arma::mat& H_b, const arma::vec& h_b, arma::mat& B1, const arma::mat& H_B, const arma::vec& h_B, arma::mat& a0, arma::mat& A, const arma::mat& H_A, const arma::vec& h_A, arma::mat& L, const arma::mat& H_L, const arma::vec& h_L, arma::mat& u, arma::mat& dU);
static SEXP _RLDM_cll_theta_ARMA_cpp_try(SEXP thSEXP, SEXP ySEXP, SEXP skipSEXP, SEXP concentratedSEXP, SEXP ib0SEXP, SEXP H_bSEXP, SEXP h_bSEXP, SEXP B1SEXP, SEXP H_BSEXP, SEXP h_BSEXP, SEXP a0SEXP, SEXP ASEXP, SEXP H_ASEXP, SEXP h_ASEXP, SEXP LSEXP, SEXP H_LSEXP, SEXP h_LSEXP, SEXP uSEXP, SEXP dUSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type th(thSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< bool >::type concentrated(concentratedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ib0(ib0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_b(H_bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h_b(h_bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B1(B1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_B(H_BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h_B(h_BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_A(H_ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h_A(h_ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_L(H_LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h_L(h_LSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type dU(dUSEXP);
    rcpp_result_gen = Rcpp::wrap(cll_theta_ARMA_cpp(th, y, skip, concentrated, ib0, H_b, h_b, B1, H_B, h_B, a0, A, H_A, h_A, L, H_L, h_L, u, dU));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_cll_theta_ARMA_cpp(SEXP thSEXP, SEXP ySEXP, SEXP skipSEXP, SEXP concentratedSEXP, SEXP ib0SEXP, SEXP H_bSEXP, SEXP h_bSEXP, SEXP B1SEXP, SEXP H_BSEXP, SEXP h_BSEXP, SEXP a0SEXP, SEXP ASEXP, SEXP H_ASEXP, SEXP h_ASEXP, SEXP LSEXP, SEXP H_LSEXP, SEXP h_LSEXP, SEXP uSEXP, SEXP dUSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_cll_theta_ARMA_cpp_try(thSEXP, ySEXP, skipSEXP, concentratedSEXP, ib0SEXP, H_bSEXP, h_bSEXP, B1SEXP, H_BSEXP, h_BSEXP, a0SEXP, ASEXP, H_ASEXP, h_ASEXP, LSEXP, H_LSEXP, h_LSEXP, uSEXP, dUSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cll_theta_STSP_cpp
double cll_theta_STSP_cpp(const arma::vec& th, const arma::mat& y, unsigned long int skip, bool concentrated, arma::mat& pi, const arma::mat& H_pi, const arma::vec& h_pi, arma::mat& L, const arma::mat& H_L, const arma::vec& h_L, arma::mat& a, arma::mat& u, arma::mat& dU);
static SEXP _RLDM_cll_theta_STSP_cpp_try(SEXP thSEXP, SEXP ySEXP, SEXP skipSEXP, SEXP concentratedSEXP, SEXP piSEXP, SEXP H_piSEXP, SEXP h_piSEXP, SEXP LSEXP, SEXP H_LSEXP, SEXP h_LSEXP, SEXP aSEXP, SEXP uSEXP, SEXP dUSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type th(thSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< bool >::type concentrated(concentratedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_pi(H_piSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h_pi(h_piSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H_L(H_LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type h_L(h_LSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type dU(dUSEXP);
    rcpp_result_gen = Rcpp::wrap(cll_theta_STSP_cpp(th, y, skip, concentrated, pi, H_pi, h_pi, L, H_L, h_L, a, u, dU));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RLDM_cll_theta_STSP_cpp(SEXP thSEXP, SEXP ySEXP, SEXP skipSEXP, SEXP concentratedSEXP, SEXP piSEXP, SEXP H_piSEXP, SEXP h_piSEXP, SEXP LSEXP, SEXP H_LSEXP, SEXP h_LSEXP, SEXP aSEXP, SEXP uSEXP, SEXP dUSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RLDM_cll_theta_STSP_cpp_try(thSEXP, ySEXP, skipSEXP, concentratedSEXP, piSEXP, H_piSEXP, h_piSEXP, LSEXP, H_LSEXP, h_LSEXP, aSEXP, uSEXP, dUSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _RLDM_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::List(*kf_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::colvec&)");
        signatures.insert("Rcpp::List(*kf2_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,const arma::colvec&)");
        signatures.insert("double(*ll_kf_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::colvec&,double)");
        signatures.insert("double(*ll_kf2_cpp)(arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::mat&,arma::colvec&,double)");
        signatures.insert("double(*ll_kf_theta_cpp)(const arma::vec&,const arma::mat&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,arma::mat&,double,double)");
        signatures.insert("void(*outputs_ARMA_cpp)(const arma::mat&,const arma::mat&,int,const arma::mat&,arma::mat&)");
        signatures.insert("void(*outputs_STSP_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,arma::mat&)");
        signatures.insert("void(*fbsolve_STSP_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,arma::mat&,arma::mat&)");
        signatures.insert("void(*solve_rmfd_cpp)(const arma::mat&,const arma::mat&,arma::mat&,arma::mat&,int)");
        signatures.insert("void(*residuals_ARMA_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,int,const arma::mat&,arma::mat&,arma::mat&)");
        signatures.insert("void(*residuals_STSP_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,arma::mat&,const arma::mat&,arma::mat&)");
        signatures.insert("double(*cll_theta_ARMA_cpp)(const arma::vec&,const arma::mat&,unsigned long int,bool,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,arma::mat&)");
        signatures.insert("double(*cll_theta_STSP_cpp)(const arma::vec&,const arma::mat&,unsigned long int,bool,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,const arma::mat&,const arma::vec&,arma::mat&,arma::mat&,arma::mat&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _RLDM_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RLDM", "_RLDM_kf_cpp", (DL_FUNC)_RLDM_kf_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_kf2_cpp", (DL_FUNC)_RLDM_kf2_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_ll_kf_cpp", (DL_FUNC)_RLDM_ll_kf_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_ll_kf2_cpp", (DL_FUNC)_RLDM_ll_kf2_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_ll_kf_theta_cpp", (DL_FUNC)_RLDM_ll_kf_theta_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_outputs_ARMA_cpp", (DL_FUNC)_RLDM_outputs_ARMA_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_outputs_STSP_cpp", (DL_FUNC)_RLDM_outputs_STSP_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_fbsolve_STSP_cpp", (DL_FUNC)_RLDM_fbsolve_STSP_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_solve_rmfd_cpp", (DL_FUNC)_RLDM_solve_rmfd_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_residuals_ARMA_cpp", (DL_FUNC)_RLDM_residuals_ARMA_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_residuals_STSP_cpp", (DL_FUNC)_RLDM_residuals_STSP_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_cll_theta_ARMA_cpp", (DL_FUNC)_RLDM_cll_theta_ARMA_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_cll_theta_STSP_cpp", (DL_FUNC)_RLDM_cll_theta_STSP_cpp_try);
    R_RegisterCCallable("RLDM", "_RLDM_RcppExport_validate", (DL_FUNC)_RLDM_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_RLDM_kf_cpp", (DL_FUNC) &_RLDM_kf_cpp, 8},
    {"_RLDM_kf2_cpp", (DL_FUNC) &_RLDM_kf2_cpp, 6},
    {"_RLDM_ll_kf_cpp", (DL_FUNC) &_RLDM_ll_kf_cpp, 9},
    {"_RLDM_ll_kf2_cpp", (DL_FUNC) &_RLDM_ll_kf2_cpp, 7},
    {"_RLDM_ll_kf_theta_cpp", (DL_FUNC) &_RLDM_ll_kf_theta_cpp, 12},
    {"_RLDM_outputs_ARMA_cpp", (DL_FUNC) &_RLDM_outputs_ARMA_cpp, 5},
    {"_RLDM_outputs_STSP_cpp", (DL_FUNC) &_RLDM_outputs_STSP_cpp, 7},
    {"_RLDM_fbsolve_STSP_cpp", (DL_FUNC) &_RLDM_fbsolve_STSP_cpp, 8},
    {"_RLDM_solve_rmfd_cpp", (DL_FUNC) &_RLDM_solve_rmfd_cpp, 5},
    {"_RLDM_residuals_ARMA_cpp", (DL_FUNC) &_RLDM_residuals_ARMA_cpp, 7},
    {"_RLDM_residuals_STSP_cpp", (DL_FUNC) &_RLDM_residuals_STSP_cpp, 9},
    {"_RLDM_cll_theta_ARMA_cpp", (DL_FUNC) &_RLDM_cll_theta_ARMA_cpp, 19},
    {"_RLDM_cll_theta_STSP_cpp", (DL_FUNC) &_RLDM_cll_theta_STSP_cpp, 13},
    {"_RLDM_RcppExport_registerCCallable", (DL_FUNC) &_RLDM_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RLDM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
